{"version":3,"sources":["serviceWorker.js","Card.js","Cardlist.js","Searchbox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","className","alt","src","Cardlist","robots","cardcomp","map","user","i","username","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredrobots","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCDSC,EAbJ,SAACC,GAAS,IACbC,EAAeD,EAAfC,KAAKC,EAAUF,EAAVE,MAAMC,EAAIH,EAAJG,GAClB,OACK,yBAAKC,UAAU,oDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBAClB,6BACA,4BAAKF,GACL,2BAAIC,MCKCK,EAXA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACVC,EAASD,EAAOE,KAAI,SAACC,EAAKC,GAC/B,OAAO,kBAAC,EAAD,CAAMT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,MAAOW,SAAUL,EAAOI,GAAGC,cAElG,OACK,6BACFJ,ICMWK,EAdC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC9B,OACI,yBAAKZ,UAAU,OAEZ,2BAAOA,UAAU,mCACjBa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCFI,G,MARF,SAACpB,GACb,OACD,yBAAKqB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC/DxB,EAAMyB,YCiDQC,E,kDA7Cd,aAAc,IAAD,8BACZ,gBAcDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACd,YAAaa,EAAME,OAAOC,SAdzC,EAAKC,MAAM,CACVxB,OAAQ,GACRO,YAAY,IAJD,E,gEASO,IAAD,OAClBkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAQ5B,IAAD,OACDC,EAAeC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAE7C,OAAQA,EAAOP,KAAKwC,cAAcC,SAAS,EAAKV,MAAMjB,YAAY0B,kBAEnE,OAA8B,IAA3BF,KAAKP,MAAMxB,OAAOmC,OAEb,uCAIH,yBAAKvC,UAAW,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUnB,OAAQ8B,U,GApCTM,aCHlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SNyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cccf6bb7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\n\r\nconst Card=(props)=>{\r\n\tconst {name,email,id}=props;\r\n\treturn(\r\n      <div className='bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n       <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n          <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n          </div>\r\n\r\n      </div>\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst Cardlist=({robots})=>{\r\n\tconst cardcomp=robots.map((user,i)=>{\r\n  return <Card id={robots[i].id} name={robots[i].name} email={robots[i].email} username={robots[i].username}  />\r\n\t\t});\r\n\treturn(\r\n      <div>\r\n   {cardcomp}\r\n    </div> \r\n\r\n\t\t);\r\n}\r\nexport default Cardlist;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Searchbox=({searchfield,searchChange})=>{\r\nreturn(\r\n    <div className='pa2'>\r\n\r\n       <input className='pa3 ba b--green bg-lightest-blue'\r\n       type=\"search\"\r\n       placeholder=\"search robots\"\r\n       onChange={searchChange}/>\r\n    </div>\r\n\r\n\t);\r\n\r\n\r\n}\r\nexport default Searchbox;","import React from 'react';\r\n\r\n\r\nconst Scroll=(props)=>{\r\n return (\r\n<div style={{overflowY:'scroll',border:'5px solid black',height:'800px'}}>\r\n{props.children}\r\n</div>\r\n \t);\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport {robots} from './robots';\r\nimport Searchbox from './Searchbox';\r\nimport './App.css';\r\nimport 'tachyons';\r\nimport Scroll from './Scroll';\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield:''\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response => response.json())\r\n  .then(users =>this.setState({robots:users}));\r\n\t\t\r\n\t}\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\t\t\r\n\t}\r\n\trender(){\r\n\t\tconst filteredrobots=this.state.robots.filter(robots=>\r\n\t\t{\r\n\t\t\treturn  robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())});\r\n\t\t\r\n\t\tif(this.state.robots.length===0)\r\n\t\t{\r\n\t\t return\t<h1>loading</h1>\r\n\t\t}\r\n\t\telse{\r\n\t\treturn(\r\n       <div className ='tc'>\r\n         <h1 className='f1'>robofriends</h1>\r\n         <Searchbox searchChange={this.onSearchChange}/>\r\n         <Scroll>\r\n         <Cardlist robots={filteredrobots}/>\r\n         </Scroll>\r\n           \r\n       </div>\r\n\r\n\t\t);\r\n\t}\r\n\t}\r\n\t\r\n} \r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n  <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}